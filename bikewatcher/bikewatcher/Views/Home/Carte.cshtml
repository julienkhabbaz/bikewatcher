@{
    ViewData["Title"] = "Carte";
    List<bikewatcher.Entity.BikeStation> stations = ViewBag.Stations;
}

@section head
{
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css" integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==" crossorigin="" />
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/leaflet.markercluster@1.3.0/dist/MarkerCluster.css" />
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/leaflet.markercluster@1.3.0/dist/MarkerCluster.Default.css" />
    <style type="text/css">
        #map {
            height: 800px;
        }
    </style>
}

<div id="map"></div>

<!-- Fichiers Javascript -->
<script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js" integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw==" crossorigin=""></script>
<script type='text/javascript' src='https://unpkg.com/leaflet.markercluster@1.3.0/dist/leaflet.markercluster.js'></script>
<script type="text/javascript">
	// On initialise la latitude et la longitude de Bordeaux (centre de la carte oui oui)
	var lat = 44.8333;
	var lon = -0.5667;

    var macarte = null;
	var markerClusters; // Servira à stocker les groupes de marqueurs
	// Nous initialisons une liste de marqueurs
    var villes = [];
	@foreach (var station in stations)
	{
		<text>
		villes.push({
			"name": "@station.commune",
			"lat": "@station.lat",
			"lon": "@station.lng",
			"velos": "@station.available_bikes",
            "places": "@station.bike_stands"
		});
		</text>
	}

	// Fonction d'initialisation de la carte
	function initMap() {
		var markers = []; // Nous initialisons la liste des marqueurs
		// Créer l'objet "macarte" et l'insèrer dans l'élément HTML qui a l'ID "map"
		macarte = L.map('map').setView([lat, lon], 11);
		markerClusters = L.markerClusterGroup(); // Nous initialisons les groupes de marqueurs
		// Leaflet ne récupère pas les cartes (tiles) sur un serveur par défaut. Nous devons lui préciser où nous souhaitons les récupérer. Ici, openstreetmap.fr
		L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
			// Il est toujours bien de laisser le lien vers la source des données
			attribution: 'données © OpenStreetMap/ODbL - rendu OSM France',
			minZoom: 1,
			maxZoom: 20
		}).addTo(macarte);
		// Nous parcourons la liste des villes
		for (ville in villes) {
			var marker = L.marker([villes[ville].lat, villes[ville].lon]); // pas de addTo(macarte), l'affichage sera géré par la bibliothèque des clusters
			marker.bindPopup("<div>"+villes[ville].name+"<p>Velos:"+villes[ville].velos+"  velos dispo</p><p>Places:"+villes[ville].places+" places dispo</p></div>");
			markerClusters.addLayer(marker); // Nous ajoutons le marqueur aux groupes
			markers.push(marker); // Nous ajoutons le marqueur à la liste des marqueurs
		}
		var group = new L.featureGroup(markers); // Nous créons le groupe des marqueurs pour adapter le zoom
		//macarte.fitBounds(group.getBounds().pad(0.5)); // Nous demandons à ce que tous les marqueurs soient visibles, et ajoutons un padding (pad(0.5)) pour que les marqueurs ne soient pas coupés
		macarte.addLayer(markerClusters);
	}
        window.onload = function () {
            //Fonction d'initialisation qui s'exécute lorsque le DOM est chargé
            if ("geolocation" in navigator) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    lat = position.coords.latitude;
                    lon = position.coords.longitude;

                    initMap();
                }, () => { initMap(); });
            }
        };
</script>
